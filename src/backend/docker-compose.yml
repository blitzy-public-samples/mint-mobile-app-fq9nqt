# Human Tasks:
# 1. Create .env file with required environment variables (JWT_SECRET, PLAID_CLIENT_ID, PLAID_SECRET, REDIS_PASSWORD, RABBITMQ_USER, RABBITMQ_PASSWORD)
# 2. Configure SSL certificates for production environment
# 3. Set up monitoring alerts and configure log aggregation
# 4. Configure backup retention policies for volumes
# 5. Review and adjust resource limits based on environment needs

version: '3.8'

services:
  # Main NestJS API service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    image: node:16-alpine
    container_name: mintreplica-api
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=mintreplica
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - JWT_SECRET=${JWT_SECRET}
      - PLAID_CLIENT_ID=${PLAID_CLIENT_ID}
      - PLAID_SECRET=${PLAID_SECRET}
    ports:
      - "3000:3000"
    volumes:
      - ./:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - backend
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # PostgreSQL database service
  postgres:
    image: postgres:14-alpine
    container_name: mintreplica-postgres
    environment:
      - POSTGRES_DB=mintreplica
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - backend
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  # Redis cache service
  redis:
    image: redis:6-alpine
    container_name: mintreplica-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    restart: unless-stopped
    networks:
      - backend
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # RabbitMQ message queue service
  rabbitmq:
    image: rabbitmq:3-management
    container_name: mintreplica-rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    ports:
      - "5672:5672"  # AMQP protocol port
      - "15672:15672"  # Management interface port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    restart: unless-stopped
    networks:
      - backend
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

volumes:
  postgres_data:
    driver: local
    name: mintreplica-postgres-data
    driver_opts:
      type: none
      device: ${PWD}/data/postgres
      o: bind

  redis_data:
    driver: local
    name: mintreplica-redis-data
    driver_opts:
      type: none
      device: ${PWD}/data/redis
      o: bind

  rabbitmq_data:
    driver: local
    name: mintreplica-rabbitmq-data
    driver_opts:
      type: none
      device: ${PWD}/data/rabbitmq
      o: bind

networks:
  backend:
    name: mintreplica-backend
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.name: mintreplica-bridge
      com.docker.network.driver.mtu: 1500