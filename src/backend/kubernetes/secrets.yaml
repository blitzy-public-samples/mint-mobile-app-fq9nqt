# Human Tasks:
# 1. Generate strong production database credentials and update DB_USERNAME/DB_PASSWORD
# 2. Generate secure JWT signing key (min 32 chars) and update JWT_SECRET
# 3. Configure Redis password for production cache instance
# 4. Set up Plaid API credentials for production environment
# 5. Create restricted AWS IAM user and generate access credentials
# 6. Store master key backups securely offline
# 7. Enable automatic key rotation in production
# 8. Review RBAC policies for secret access

# Requirement: Data Security
# Location: Technical Specification/9.2 Data Security/9.2.1 Encryption Standards
# Implementation: Kubernetes Secrets with AES-256-GCM encryption at rest
apiVersion: v1
kind: Secret
metadata:
  name: mint-replica-backend-secrets
  namespace: default
  labels:
    app: mint-replica
    component: backend
    environment: production
  annotations:
    encryption.k8s.io/mode: aescbc # Ensures AES-256-CBC encryption at rest
    encryption.k8s.io/key-rotation: "true" # Enable automatic key rotation
type: Opaque
data:
  # Database credentials
  # Requirement: Security Architecture
  # Location: Technical Specification/5.4 Security Architecture
  # Implementation: Secure credential storage with field-level encryption
  DB_USERNAME: bWludC1yZXBsaWNhLXByb2Q= # base64 encoded
  DB_PASSWORD: UEAkJHcwcmQxMjM0IQ== # base64 encoded, min 8 chars

  # JWT configuration
  # Requirement: Key Management
  # Location: Technical Specification/9.2 Data Security/9.2.2 Data Classification
  # Implementation: Secure storage of JWT signing key
  JWT_SECRET: U2VjdXJlSldUU2lnbmluZ0tleUZvck1pbnRSZXBsaWNhQXBw # base64 encoded, min 32 chars

  # Redis credentials
  # Requirement: Data Security
  # Location: Technical Specification/9.2 Data Security/9.2.1 Encryption Standards
  # Implementation: Secure Redis password storage
  REDIS_PASSWORD: UmVkaXNQQHNzdzByZA== # base64 encoded

  # Plaid API credentials
  # Requirement: Security Architecture
  # Location: Technical Specification/5.4 Security Architecture
  # Implementation: Secure storage of third-party API credentials
  PLAID_CLIENT_ID: cGxhaWQtY2xpZW50LWlkLTEyMzQ= # base64 encoded
  PLAID_SECRET: cGxhaWQtc2VjcmV0LWtleS00NTY3ODkw # base64 encoded, min 32 chars

  # AWS credentials
  # Requirement: Key Management
  # Location: Technical Specification/9.2 Data Security/9.2.2 Data Classification
  # Implementation: Secure storage of cloud provider credentials
  AWS_ACCESS_KEY_ID: QUtJQUlCQUpZN1BYWE9MTzRFWFE= # base64 encoded, 20 chars
  AWS_SECRET_ACCESS_KEY: Wm14cFpEQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNQT09 # base64 encoded, min 40 chars